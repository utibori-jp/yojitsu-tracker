openapi: 3.0.0
info:
  title: TODO Application API
  version: v1.0.0
  description: |-
    API for managing TODO tasks, based on the features of the provided HTML/JavaScript application.
    This application allows users to create, track, and manage tasks with details like
    description, estimated time, due date, priority, and status.
    It also includes features for time tracking and reflection memos upon task completion.

servers:
  - url: http://localhost:8080/api
    description: Local development server

components:
  schemas:
    TodoCreationRequest:
      type: object
      required:
        - name
        - estimatedTimeSec
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Name of the task.
          example: "Finalize project report"
        description:
          type: string
          description: Detailed description of the task (optional).
          nullable: true
          maxLength: 1000
          example: "Compile all sections, review grammar, and add a conclusion."
        estimatedTimeSec:
          type: integer
          format: int32
          minimum: 1
          description: Estimated time to complete the task in minutes.
          example: 120
        dueDate:
          type: string
          format: date
          pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])$'
          description: Due date for the task (YYYY-MM-DD, optional).
          nullable: true
          example: "2025-05-20"
        priority:
          type: string
          description: Priority of the task (optional, defaults to 'medium' on server).
          enum: [high, medium, low]
          default: medium
          example: "high"
          nullable: true

    Todo:
      type: object
      required:
        - id
        - name
        - estimatedTimeSec
        - priority
        - actualTimeSec
        - status
      properties:
        id:
          type: integer
          description: Unique identifier for the TODO item.
          readOnly: true
          example: 200
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Name of the task.
          example: "Finalize project report"
        description:
          type: string
          description: Detailed description of the task.
          nullable: true
          maxLength: 1000
          example: "Compile all sections, review grammar, and add a conclusion."
        estimatedTimeSec:
          type: integer
          format: int32
          minimum: 1
          description: Estimated time to complete the task in minutes.
          example: 120
        actualTimeSec:
          type: integer
          format: int32
          minimum: 0
          description: Actual time spent on the task in minutes.
          example: 75
        dueDate:
          type: string
          format: date
          pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])$'
          description: Due date for the task (YYYY-MM-DD).
          nullable: true
          example: "2025-05-20"
        priority:
          type: string
          description: Priority of the task.
          enum: [high, medium, low]
          example: "high"
        status:
          type: string
          description: Current status of the task.
          enum: [todo, doing, pending, done]
          example: "doing"
        reflectionMemo:
          type: string
          description: Reflection memo added upon task completion.
          maxLength: 2000
          nullable: true
          example: "Took longer than expected due to research."

    TodoUpdateRequest:
      type: object
      description: Schema for updating an existing TODO item. At least one field must be provided.
      minProperties: 1
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
          description: Name of the task.
          example: "Review project report"
        description:
          type: string
          description: Detailed description of the task.
          nullable: true
          maxLength: 1000
          example: "Review all sections for clarity and accuracy."
        estimatedTimeSec:
          type: integer
          format: int32
          minimum: 1
          description: Estimated time to complete the task in seconds. If omitted in an update, the existing value is not changed.
          example: 90
        actualTimeSec:
          type: integer
          format: int32
          minimum: 0
          description: Actual time spent on the task in minutes. Can be set or updated. If omitted, defaults to 0.
          nullable: true
          example: 75
        dueDate:
          type: string
          format: date
          pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])$'
          description: Due date for the task (YYYY-MM-DD).
          nullable: true
          example: "2025-05-22"
        priority:
          type: string
          description: Priority of the task.
          enum: [high, medium, low]
          nullable: true
          example: "medium"
        status:
          type: string
          description: Current status of the task.
          enum: [todo, doing, pending, done]
          example: "pending"
        reflectionMemo:
          type: string
          description: Reflection memo added upon task completion.
          maxLength: 2000
          nullable: true
          example: "Further research needed for section 3."

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

paths:
  /todos:
    get:
      summary: List all TODOs
      description: Retrieves a list of all TODO items.
      operationId: listTodos
      tags:
        - Todos
      parameters:
        - name: status
          in: query
          description: Filter by task status.
          required: false
          schema:
            type: string
            enum: [todo, doing, pending, done]
          example: "todo"
        - name: priority
          in: query
          description: Filter by task priority.
          required: false
          schema:
            type: string
            enum: [high, medium, low]
          example: "high"
        - name: dueDate
          in: query
          description: Filter by due date (YYYY-MM-DD).
          required: false
          schema:
            type: string
            format: date
            pattern: '^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])$'
          example: "2025-05-20"
        - name: name
          in: query
          description: Filter by task name (partial match, case-insensitive).
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A list of TODOs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Todo"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    # Path for creating a new TODO item, conventionally POST to the collection URI /todos
    post:
      summary: Create a new TODO
      description: Adds a new TODO item to the list.
      operationId: createTodo
      tags:
        - Todos
      requestBody:
        description: TODO item to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TodoCreationRequest"
      responses:
        "201":
          description: TODO item created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "400":
          description: Invalid input provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Path for operations on a specific TODO item
  /todos/{todoId}: # Changed from /todo/{todoId} to /todos/{todoId} for consistency
    parameters:
      - name: todoId
        in: path
        required: true
        description: ID of the TODO item.
        schema:
          type: integer
          format: int32
          example: 1
    put:
      summary: Update an existing TODO
      description: Updates an existing TODO item by ID.
      operationId: updateTodo
      tags:
        - Todos
      requestBody:
        description: TODO item data to update. At least one field must be provided.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TodoUpdateRequest"
      responses:
        "200":
          description: TODO item updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "400":
          description: Invalid input provided.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: TODO item not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a TODO
      description: Deletes a TODO item by ID.
      operationId: deleteTodo
      tags:
        - Todos
      responses:
        "204":
          description: TODO item deleted successfully.
        "404":
          description: TODO item not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

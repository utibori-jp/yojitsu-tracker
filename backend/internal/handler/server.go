package handler

import (
	"net/http"
)

// Server is a struct that aggregates all the specific handlers (e.g., TodoHandler).
// It implements the server interface generated by oapi-codegen, allowing it to be
// used with the generated router. This acts as a central point for request delegation.
type Server struct {
	todoHandler *TodoHandler // Handler for todo-related operations.
	// Add other handlers here as your application grows (e.g., userHandler *UserHandler).
}

// NewServer creates a new Server instance.
// It takes specific handlers as dependencies and wires them up.
func NewServer(todoHandler *TodoHandler) *Server {
	return &Server{
		todoHandler: todoHandler,
		// Initialize other handlers here.
	}
}

// ListTodos delegates the request to the ListTodos method of the embedded TodoHandler.
// This method signature matches the one generated by oapi-codegen for the '/todos' GET endpoint.
func (s *Server) ListTodos(w http.ResponseWriter, r *http.Request) {
	s.todoHandler.ListTodos(w, r)
}

// CreateTodo delegates the request to the CreateTodo method of the embedded TodoHandler.
// This method signature matches the one generated by oapi-codegen for the '/todos' POST endpoint.
func (s *Server) CreateTodo(w http.ResponseWriter, r *http.Request) {
	s.todoHandler.CreateTodo(w, r)
}

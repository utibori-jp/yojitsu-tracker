// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all TODOs
	// (GET /todos)
	ListTodos(w http.ResponseWriter, r *http.Request)
	// Create a new TODO
	// (POST /todos)
	CreateTodo(w http.ResponseWriter, r *http.Request)
	// Delete a TODO
	// (DELETE /todos/{todoId})
	DeleteTodo(w http.ResponseWriter, r *http.Request, todoId int32)
	// Update an existing TODO
	// (PUT /todos/{todoId})
	UpdateTodo(w http.ResponseWriter, r *http.Request, todoId int32)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all TODOs
// (GET /todos)
func (_ Unimplemented) ListTodos(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new TODO
// (POST /todos)
func (_ Unimplemented) CreateTodo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a TODO
// (DELETE /todos/{todoId})
func (_ Unimplemented) DeleteTodo(w http.ResponseWriter, r *http.Request, todoId int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an existing TODO
// (PUT /todos/{todoId})
func (_ Unimplemented) UpdateTodo(w http.ResponseWriter, r *http.Request, todoId int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListTodos operation middleware
func (siw *ServerInterfaceWrapper) ListTodos(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTodos(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTodo operation middleware
func (siw *ServerInterfaceWrapper) CreateTodo(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTodo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTodo operation middleware
func (siw *ServerInterfaceWrapper) DeleteTodo(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "todoId" -------------
	var todoId int32

	err = runtime.BindStyledParameterWithOptions("simple", "todoId", chi.URLParam(r, "todoId"), &todoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "todoId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTodo(w, r, todoId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateTodo operation middleware
func (siw *ServerInterfaceWrapper) UpdateTodo(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "todoId" -------------
	var todoId int32

	err = runtime.BindStyledParameterWithOptions("simple", "todoId", chi.URLParam(r, "todoId"), &todoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "todoId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTodo(w, r, todoId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/todos", wrapper.ListTodos)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/todos", wrapper.CreateTodo)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/todos/{todoId}", wrapper.DeleteTodo)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/todos/{todoId}", wrapper.UpdateTodo)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all TODOs
	// (GET /todos)
	ListTodos(w http.ResponseWriter, r *http.Request, params ListTodosParams)
	// Create a new TODO
	// (POST /todos)
	CreateTodo(w http.ResponseWriter, r *http.Request)
	// Delete a TODO
	// (DELETE /todos/{todoId})
	DeleteTodo(w http.ResponseWriter, r *http.Request, todoId int32)
	// Update an existing TODO
	// (PUT /todos/{todoId})
	UpdateTodo(w http.ResponseWriter, r *http.Request, todoId int32)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all TODOs
// (GET /todos)
func (_ Unimplemented) ListTodos(w http.ResponseWriter, r *http.Request, params ListTodosParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new TODO
// (POST /todos)
func (_ Unimplemented) CreateTodo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a TODO
// (DELETE /todos/{todoId})
func (_ Unimplemented) DeleteTodo(w http.ResponseWriter, r *http.Request, todoId int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an existing TODO
// (PUT /todos/{todoId})
func (_ Unimplemented) UpdateTodo(w http.ResponseWriter, r *http.Request, todoId int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListTodos operation middleware
func (siw *ServerInterfaceWrapper) ListTodos(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTodosParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "priority" -------------

	err = runtime.BindQueryParameter("form", true, false, "priority", r.URL.Query(), &params.Priority)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "priority", Err: err})
		return
	}

	// ------------- Optional query parameter "dueDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "dueDate", r.URL.Query(), &params.DueDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dueDate", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTodos(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTodo operation middleware
func (siw *ServerInterfaceWrapper) CreateTodo(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTodo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTodo operation middleware
func (siw *ServerInterfaceWrapper) DeleteTodo(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "todoId" -------------
	var todoId int32

	err = runtime.BindStyledParameterWithOptions("simple", "todoId", chi.URLParam(r, "todoId"), &todoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "todoId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTodo(w, r, todoId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateTodo operation middleware
func (siw *ServerInterfaceWrapper) UpdateTodo(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "todoId" -------------
	var todoId int32

	err = runtime.BindStyledParameterWithOptions("simple", "todoId", chi.URLParam(r, "todoId"), &todoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "todoId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTodo(w, r, todoId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/todos", wrapper.ListTodos)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/todos", wrapper.CreateTodo)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/todos/{todoId}", wrapper.DeleteTodo)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/todos/{todoId}", wrapper.UpdateTodo)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

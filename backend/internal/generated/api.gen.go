// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new TODO
	// (POST /todo)
	CreateTodo(w http.ResponseWriter, r *http.Request)
	// Delete a TODO
	// (DELETE /todo/{todoId})
	DeleteTodo(w http.ResponseWriter, r *http.Request, todoId int32)
	// Update an existing TODO
	// (PUT /todo/{todoId})
	UpdateTodo(w http.ResponseWriter, r *http.Request, todoId int32)
	// List all TODOs
	// (GET /todos)
	ListTodos(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Create a new TODO
// (POST /todo)
func (_ Unimplemented) CreateTodo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a TODO
// (DELETE /todo/{todoId})
func (_ Unimplemented) DeleteTodo(w http.ResponseWriter, r *http.Request, todoId int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an existing TODO
// (PUT /todo/{todoId})
func (_ Unimplemented) UpdateTodo(w http.ResponseWriter, r *http.Request, todoId int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all TODOs
// (GET /todos)
func (_ Unimplemented) ListTodos(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateTodo operation middleware
func (siw *ServerInterfaceWrapper) CreateTodo(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTodo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTodo operation middleware
func (siw *ServerInterfaceWrapper) DeleteTodo(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "todoId" -------------
	var todoId int32

	err = runtime.BindStyledParameterWithOptions("simple", "todoId", chi.URLParam(r, "todoId"), &todoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "todoId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTodo(w, r, todoId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateTodo operation middleware
func (siw *ServerInterfaceWrapper) UpdateTodo(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "todoId" -------------
	var todoId int32

	err = runtime.BindStyledParameterWithOptions("simple", "todoId", chi.URLParam(r, "todoId"), &todoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "todoId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTodo(w, r, todoId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTodos operation middleware
func (siw *ServerInterfaceWrapper) ListTodos(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTodos(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/todo", wrapper.CreateTodo)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/todo/{todoId}", wrapper.DeleteTodo)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/todo/{todoId}", wrapper.UpdateTodo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/todos", wrapper.ListTodos)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"2qdmcTVZ/R4AAP//IEkFs6UbAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

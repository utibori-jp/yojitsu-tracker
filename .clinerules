# Contribution and Development Rules (.clinerules)

## 1. はじめに

このドキュメントは、`yojitsu-tracker` プロジェクトの開発を進める上でのルールやガイドラインを定めたものです。
プロジェクトの品質維持とスムーズな開発のため、開発に参加される方はご一読ください。

## 2. 基本的な開発フロー

1.  **Issueの確認:** 着手するタスクやバグがIssueとして登録されているか確認します。なければ作成します。
2.  **ブランチの作成:** `develop` ブランチ（または `main`）から作業内容に応じたブランチを作成します。（例: `feature/add-task-filter`, `fix/timer-bug`）
3.  **要件ドキュメントの更新:** **アプリケーションの動作や仕様に変更を加える際には、まず `requirements/` フォルダ内にある関連する要件定義ファイルに変更点を記述・修正してください。**
4.  **コーディング:** 上記で更新した要件定義に従って、コードの修正・追加を行います。
5.  **テスト:** 作成・修正したコードに対するテストを記述・実行します。（テストコードの追加・修正も含む）
6.  **コミット:** コミットメッセージの規約に従って、変更内容をコミットします。
7.  **Pull Requestの作成:** `develop` ブランチに向けてPull Requestを作成します。変更内容や関連するIssue番号を明確に記載してください。
8.  **レビュー:** 他の開発者によるレビューを受け、指摘事項があれば修正します。
9.  **マージ:** レビューで承認された後、リポジトリ管理者がブランチをマージします。

## 3. ブランチ戦略 (例)

* **main:** リリース可能な安定版。直接のコミットは禁止。
* **develop:** 開発中の最新版。機能開発はこのブランチから派生。
* **feature/xxx:** 新機能開発用ブランチ。
* **fix/xxx:** バグ修正用ブランチ。

## 4. コミットメッセージの規約

コミットメッセージは Conventional Commits ([https://www.conventionalcommits.org/](https://www.conventionalcommits.org/)) に準拠することを推奨します。

* **type:** `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore` など
* **subject:** 変更内容を簡潔に記述 (例: `feat: add task sorting feature`)

## 5. コーディング規約

* (使用する言語のスタイルガイドやリンター/フォーマッターに関するルールを記載)
* 例: ESLint, Prettier を使用。設定はリポジトリルートに配置。コミット前に必ず `npm run lint` および `npm run format` を実行してください。

## 6. **重要なルール: コード変更と要件ドキュメントの同期**

* **変更を加える際には、変更について `requirements/` フォルダ内の適切なファイルへ変更点を記載し、そのうえでコードも修正するようにしてください。**
* これは、コードとドキュメント（要件定義）の間の不整合を防ぎ、プロジェクトの意図や仕様を正確に保つために重要です。
* Pull Request のレビュー時には、コードだけでなく、関連する `requirements/` フォルダ内のファイルも変更されているか確認します。

## 7. その他

* (依存関係の追加・更新ルール、レビューの依頼方法、コミュニケーションツールなど、その他プロジェクト固有のルールがあれば記載)
